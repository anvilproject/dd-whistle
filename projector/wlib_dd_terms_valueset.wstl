// Description: Build actual ValueSet resources
//
// Arguments:
//  study - This is the full study object created by Whistler
//  cs_entry - This is the object from the Whistler valueset array. It contains the following: 
//      * study - ID associated with the study
//      * table_name - The table from which this value set can be found
//      * varname - The variable associated with this value set. This may be nil/non-existant, in which
//                  case the value set will be for the table instead of the contents of the variable
//      * url   - The DD code-system's URL
//
def BuildValueSet(study, cs_entry) {
    meta.tag[]: StudyMeta(study);
    if (cs_entry.varname) {
        identifier[]: Key_Identifier(study, "ValueSet", $StrCat(cs_entry.study, ".", cs_entry.table_name, ".", cs_entry.varname));
        identifier[0].use: "official";
        name: BuildVariableTerminologyId(cs_entry.study, cs_entry.table_name, cs_entry.varname);
        title: $StrCat("ValueSet for all values associated with variable, ", cs_entry.table_name, ".", cs_entry.varname, ", from study, ", cs_entry.study, ".");
    } else {
        identifier[]: Key_Identifier(study, "ValueSet", $StrCat(cs_entry.study, ".", cs_entry.table_name));
        identifier[0].use: "official";
        name: BuildTableTerminologyId(cs_entry.study, cs_entry.table_name);
        title: $StrCat("ValueSet for all variables associated with table, ", cs_entry.table_name, ", from study, ", cs_entry.study, ".");
    }
    url: ConvertForValueSetURL(cs_entry.url);
    compose.include[0].system: cs_entry.url;
    status: "active";
    publisher: study.publisher;
    resourceType: "ValueSet";
}
